{"version":3,"sources":["components/ui/Notifications.js","utils/minter.js","hooks/useContract.js","hooks/useMinterContract.js","hooks/useMarketContract.js","components/create/Create.js","components/navbar/Navigation.js","utils/index.js","components/ui/Identicon.js","components/nfts/Card.js","components/ui/Loader.js","components/explore/Explore.js","components/profile/Profile.js","App.js","reportWebVitals.js","index.js"],"names":["NotificationSuccess","text","className","NotificationError","DefaultProps","defaultProps","client","ipfsHttpClient","createNft","minterContract","marketContract","price","performActions","name","description","exteralUrl","ipfsImage","ownerAddress","kit","defaultAccount","data","JSON","stringify","image","owner","add","added","url","path","methods","safeMint","send","from","transaction","console","log","event","value","tokenId","parseInt","createMarketItem","listing","uploadToIpfs","e","file","target","files","progress","prog","address","setApprovalForAll","MarketplaceContractAddress","makeItem","NFTContractAddress","useContract","abi","contractAddress","useContractKit","getConnectedKit","useState","contract","setContract","getContract","useCallback","web3","eth","Contract","useEffect","useMinterContract","NFTAbi","useMarketContract","MarketAbi","MarketContractAddress","AddNfts","setDescription","setExteralUrl","setIpfsImage","setName","show","setShow","setPrice","navigate","useNavigate","handleClose","addNft","toast","error","Button","onClick","variant","Modal","onHide","centered","Header","closeButton","Title","Body","Form","onSubmit","preventDefault","FloatingLabel","controlId","label","Control","type","placeholder","onChange","as","style","height","imageUrl","alert","listingPrice","ethers","utils","parseEther","toString","getPrice","Footer","disabled","Navigation","destroy","connect","to","Create","truncateAddress","slice","length","Identicon","size","rest","ref","useRef","current","innerHTML","appendChild","Jazzicon","width","NftCard","nft","relistNft","relistItem","itemId","buyNft","id","nftMarketPrice","_totalPrice","parseUnits","purchaseItem","remove","Col","xs","sm","lg","xl","Card","Stack","direction","gap","seller","Badge","bg","src","alt","Text","relist","priceFormatted","Loader","Spinner","animation","role","Explore","nfts","setNfts","loading","setLoading","getAssets","fetchMarketItems","call","Promise","all","map","marketItem","Number","tokenURI","axios","get","meta","formatUnits","externalUrl","items","toLowerCase","Row","_nft","RingLoader","color","Profile","filter","profileItems","index","App","exact","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","networks","Alfajores","network","NetworkNames","rpcUrl","graphQl","explorer","chainId","dapp","document","getElementById"],"mappings":"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","file":"static/js/main.df6db150.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n\r\nconst Notification = () => (\r\n  <ToastContainer\r\n    position=\"bottom-center\"\r\n    autoClose={5000}\r\n    hideProgressBar\r\n    newestOnTop\r\n    closeOnClick\r\n    rtl={false}\r\n    pauseOnFocusLoss\r\n    draggable={false}\r\n    pauseOnHover\r\n  />\r\n);\r\n\r\nconst NotificationSuccess = ({ text }) => (\r\n  <div>\r\n    <i className=\"bi bi-check-circle-fill text-success mx-2\" />\r\n    <span className=\"text-secondary mx-1\">{text}</span>\r\n  </div>\r\n);\r\n\r\nconst NotificationError = ({ text }) => (\r\n  <div>\r\n    <i className=\"bi bi-x-circle-fill text-danger mx-2\" />\r\n    <span className=\"text-secondary mx-1\">{text}</span>\r\n  </div>\r\n);\r\n\r\nconst Props = {\r\n  text: PropTypes.string,\r\n};\r\n\r\nconst DefaultProps = {\r\n  text: \"\",\r\n};\r\n\r\nNotificationSuccess.propTypes = Props;\r\nNotificationSuccess.defaultProps = DefaultProps;\r\n\r\nNotificationError.propTypes = Props;\r\nNotificationError.defaultProps = DefaultProps;\r\n\r\nexport { Notification, NotificationSuccess, NotificationError };\r\n","import { create as ipfsHttpClient } from \"ipfs-http-client\";\r\nimport axios from \"axios\";\r\nimport NFTContractAddress from \"../contracts/NFT-address.json\";\r\nimport MarketplaceContractAddress from \"../contracts/Marketplace-address.json\";\r\n\r\nconst client = ipfsHttpClient(\"https://ipfs.infura.io:5001/api/v0\");\r\n\r\n// helper function for minting the NFTs\r\nexport const createNft = async (\r\n    minterContract,\r\n    marketContract,\r\n    price,\r\n    performActions,\r\n    { name, description, exteralUrl, ipfsImage, ownerAddress}\r\n  ) => {\r\n    await performActions(async (kit) => {\r\n      // require that NFT has a name, description and an image\r\n      if (!name || !description || !ipfsImage) return;\r\n      // address of the account that is currently connected to the dapp via the wallet.\r\n      const { defaultAccount } = kit;\r\n  \r\n      // convert NFT metadata to JSON format\r\n      const data = JSON.stringify({\r\n        name,\r\n        description,\r\n        exteralUrl,\r\n        image: ipfsImage,\r\n        owner: defaultAccount\r\n      });\r\n  \r\n      try {\r\n        // save NFT metadata to IPFS\r\n        const added = await client.add(data);\r\n  \r\n        // IPFS url for uploaded metadata\r\n        const url = `https://ipfs.infura.io/ipfs/${added.path}`;\r\n\r\n\r\n        // mint the NFT and save the IPFS url to the blockchain\r\n        let transaction = await minterContract.methods\r\n          .safeMint(ownerAddress, url)\r\n          .send({ from: defaultAccount });\r\n\r\n        console.log(transaction)\r\n\r\n        // get tokenId from transaction object (generated by the safeMint method call)\r\n        let event = transaction['events']['Transfer']\r\n        let value = event[\"returnValues\"][\"tokenId\"]\r\n        let tokenId = parseInt(value)\r\n\r\n        // calls function that lists the minted NFT in the marketplace\r\n        let listing = await createMarketItem(defaultAccount, minterContract, marketContract, price, tokenId);\r\n\r\n        console.log(listing)\r\n  \r\n      } catch (error) {\r\n        console.log(\"Error listing NFT: \", error);\r\n      }\r\n    });\r\n};\r\n\r\n\r\n// uploads image metadata to IPFS (file system storage)\r\nexport const uploadToIpfs = async (e) => {\r\n  const file = e.target.files[0];\r\n  if (!file) return;\r\n  try {\r\n    const added = await client.add(file, {\r\n      progress: (prog) => console.log(`received: ${prog}`),\r\n    });\r\n    return `https://ipfs.infura.io/ipfs/${added.path}`;\r\n  } catch (error) {\r\n    console.log(\"Error uploading file: \", error);\r\n  }\r\n};\r\n\r\n// function to get NFTs from the NFT contract\r\nexport const getNfts = async (minterContract) => {\r\n  try {\r\n    const nfts = [];\r\n    // gets total amount of NFTs in the contract\r\n    const nftsLength = await minterContract.methods.totalSupply().call();\r\n    // loop through all NFTs\r\n    for (let i = 0; i < Number(nftsLength); i++) {\r\n      const nft = new Promise(async (resolve) => {\r\n        // get NFT token URI to retrieve NFT metadata\r\n        const res = await minterContract.methods.tokenURI(i).call();\r\n        const meta = await fetchNftMeta(res);\r\n        const owner = await fetchNftOwner(minterContract, i);\r\n        resolve({\r\n          index: i,\r\n          owner,\r\n          name: meta.data.name,\r\n          image: meta.data.image,\r\n          description: meta.data.description\r\n        });\r\n      });\r\n      nfts.push(nft);\r\n    }\r\n    return Promise.all(nfts);\r\n  } catch (e) {\r\n    console.log({ e });\r\n  }\r\n};\r\n\r\n// gets NFT metadata from IPFS\r\nexport const fetchNftMeta = async (ipfsUrl) => {\r\n  try {\r\n    if (!ipfsUrl) return null;\r\n    const meta = await axios.get(ipfsUrl);\r\n    return meta;\r\n  } catch (e) {\r\n    console.log({ e });\r\n  }\r\n};\r\n\r\n// gets NFT owner from NFT contract\r\nexport const fetchNftOwner = async (minterContract, index) => {\r\n  try {\r\n    return await minterContract.methods.ownerOf(index).call();\r\n  } catch (e) {\r\n    console.log({ e });\r\n  }\r\n};\r\n\r\n// get NFT contract owner\r\nexport const fetchNftContractOwner = async (minterContract) => {\r\n  try {\r\n    let owner = await minterContract.methods.owner().call();\r\n    return owner;\r\n  } catch (e) {\r\n    console.log({ e });\r\n  }\r\n};\r\n\r\n// List NFT in the marketplace\r\nexport const createMarketItem = async (address, minterContract, marketContract, price, tokenId) => {\r\n  try {\r\n\r\n    console.log(price)\r\n    // allows marketplace to trade the user NFTs\r\n    await minterContract.methods.setApprovalForAll(MarketplaceContractAddress.address, true).send({ from: address })\r\n    // creates the NFT item in the marketplace contract\r\n    let owner = await marketContract.methods.makeItem(NFTContractAddress.address, tokenId, price).send({ from: address });\r\n    return owner;\r\n  } catch (e) {\r\n    console.log({ e });\r\n  }\r\n};\r\n  ","import { useState, useEffect, useCallback } from \"react\";\r\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\r\n\r\nexport const useContract = (abi, contractAddress) => {\r\n  const { getConnectedKit, address } = useContractKit();\r\n  const [contract, setContract] = useState(null);\r\n\r\n  const getContract = useCallback(async () => {\r\n    const kit = await getConnectedKit();\r\n    setContract(new kit.web3.eth.Contract(abi, contractAddress));\r\n  }, [getConnectedKit, abi, contractAddress]);\r\n\r\n  useEffect(() => {\r\n    if (address) getContract();\r\n  }, [address, getContract]);\r\n\r\n  return contract;\r\n};\r\n","import { useContract } from \"./useContract\";\r\nimport NFTAbi from \"../contracts/NFT.json\";\r\nimport NFTContractAddress from \"../contracts/NFT-address.json\";\r\n\r\nexport const useMinterContract = () =>\r\n  useContract(NFTAbi.abi, NFTContractAddress.address);\r\n\r\n","import { useContract } from \"./useContract\";\r\nimport MarketAbi from \"../contracts/Marketplace.json\";\r\nimport MarketContractAddress from \"../contracts/Marketplace-address.json\";\r\n\r\nexport const useMarketContract = () =>\r\n  useContract(MarketAbi.abi, MarketContractAddress.address);\r\n","import React, { useState } from \"react\";\r\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport { NotificationSuccess,  NotificationError} from \"../ui/Notifications\";\r\nimport { Button, Modal, Form, FloatingLabel } from \"react-bootstrap\";\r\nimport { uploadToIpfs } from \"../../utils/minter\";\r\nimport { useMinterContract } from \"../../hooks\";\r\nimport {useMarketContract} from \"../../hooks/useMarketContract\";\r\nimport { createNft } from \"../../utils/minter\";\r\nimport { ethers } from \"ethers\";\r\n\r\n\r\nconst AddNfts = () => {\r\n  // state for the form data\r\n  const [description, setDescription] = useState(\"\");\r\n  const [exteralUrl, setExteralUrl] = useState(\"\");\r\n  const [ipfsImage, setIpfsImage] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [show, setShow] = useState(false);\r\n  const [price, setPrice] = useState(0);\r\n\r\n  // allows to redirect user after a function is called\r\n  const navigate = useNavigate();\r\n\r\n  // get wallet address\r\n  const { performActions, address } = useContractKit();\r\n\r\n  // contract abstractions\r\n  const minterContract = useMinterContract();\r\n  const marketContract = useMarketContract();\r\n\r\n\r\n  // check if all form data has been filled\r\n  const isFormFilled = () =>\r\n  name && ipfsImage && description && price;\r\n\r\n  // close the popup modal\r\n  const handleClose = () => {\r\n    setShow(false);\r\n  };\r\n\r\n  // calls function minter from utils folder to mint the NFT and list it on the market\r\n  const addNft = async (data) => {\r\n    try {\r\n        // mint the NFT and list it on the marketplace\r\n        await createNft(minterContract, marketContract, price, performActions, data);\r\n        toast(<NotificationSuccess text=\"Updating NFT list....\" />);\r\n        // redirect user to profile page\r\n        navigate(`/profile`)\r\n      } catch (error) {\r\n        console.log({ error });\r\n        toast(<NotificationError text=\"Failed to create an NFT.\" />);\r\n      }\r\n    };\r\n\r\n  // parses the price into Ether format from form input\r\n  const getPrice = (e) => {\r\n    try {\r\n      const listingPrice = ethers.utils.parseEther(e.toString())\r\n      setPrice(listingPrice);\r\n    } catch (error) {\r\n      console.log({ error })\r\n      toast(<NotificationError text=\"Price must be a Number.\" />);\r\n    }\r\n  }\r\n\r\n  // display the popup modal\r\n  const handleShow = () => setShow(true);\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        onClick={handleShow}\r\n        variant=\"outline-dark\"\r\n        className=\"rounded-pill px-5 m-2\"\r\n      >\r\n        Create NFT\r\n      </Button>\r\n\r\n      {/* Modal */}\r\n      <Modal show={show} onHide={handleClose} centered>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Create NFT</Modal.Title>\r\n        </Modal.Header>\r\n\r\n        <Modal.Body>\r\n          <Form onSubmit={(e) => e.preventDefault()}>\r\n            <FloatingLabel\r\n              controlId=\"inputLocation\"\r\n              label=\"Name\"\r\n              className=\"mb-3\"\r\n            >\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Name of NFT\"\r\n                onChange={(e) => {\r\n                  setName(e.target.value);\r\n                }}\r\n              />\r\n            </FloatingLabel>\r\n\r\n            <FloatingLabel\r\n              controlId=\"inputDescription\"\r\n              label=\"Description\"\r\n              className=\"mb-3\"\r\n            >\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                placeholder=\"description\"\r\n                style={{ height: \"80px\" }}\r\n                onChange={(e) => {\r\n                  setDescription(e.target.value);\r\n                }}\r\n              />\r\n            </FloatingLabel>\r\n\r\n            <FloatingLabel\r\n              controlId=\"InputExternalUrl\"\r\n              label=\"ExternalUrl\"\r\n              className=\"mb-3\"\r\n            >\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                placeholder=\"external url to your NFT (optional)\"\r\n                style={{ height: \"80px\" }}\r\n                onChange={(e) => {\r\n                  setExteralUrl(e.target.value);\r\n                }}\r\n              />\r\n            </FloatingLabel>\r\n\r\n            <Form.Control\r\n              type=\"file\"\r\n              className={\"mb-3\"}\r\n              onChange={async (e) => {\r\n                const imageUrl = await uploadToIpfs(e);\r\n                if (!imageUrl) {\r\n                  alert(\"failed to upload image\");\r\n                  return;\r\n                }\r\n                setIpfsImage(imageUrl);\r\n              }}\r\n              placeholder=\"Product name\"\r\n            ></Form.Control>\r\n\r\n          <FloatingLabel\r\n              controlId=\"InputPrice\"\r\n              label=\"Price\"\r\n              className=\"mb-3\"\r\n            >\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                placeholder=\"Listing Price for your NFT\"\r\n                style={{ height: \"80px\" }}\r\n                onChange={(e) => {\r\n                  getPrice(e.target.value);\r\n                }}\r\n              />\r\n              <select>\r\n                  <option value=\"CELO\">CELO</option>\r\n              </select>\r\n            </FloatingLabel>\r\n          </Form>\r\n        </Modal.Body>\r\n\r\n        <Modal.Footer>\r\n          <Button variant=\"outline-secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button\r\n            variant=\"dark\"\r\n            disabled={!isFormFilled()}\r\n            onClick={() => {\r\n              addNft({\r\n                name,\r\n                description,\r\n                exteralUrl,\r\n                ipfsImage,\r\n                ownerAddress: address\r\n              });\r\n              handleClose();\r\n            }}\r\n          >\r\n            Create NFT\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddNfts;\r\n","import React from 'react'\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport {useContractKit} from \"@celo-tools/use-contractkit\";\r\nimport Create  from \"../create/Create\";\r\nimport './Navigation.css'\r\n\r\n\r\n const Navigation = () => {\r\n     // gets wallet address and connect and destroy from Contract kit to allow user to log in and log out\r\n     const {address, destroy, connect} = useContractKit();\r\n\r\n     return (\r\n         <>\r\n\r\n            <nav className=\"navbar-main p-2 border-b-2\">\r\n                <h1 className='py-4 px-4 font-bold text-3xl'>VMS Marketplace</h1>\r\n                <div className='div-links'>\r\n                    <Link to=\"/explore\" className=\"navbar-links rounded-pill py-3 m-1\">\r\n                        Explore\r\n                    </Link>\r\n\r\n                    <Link to=\"/profile\" className=\"navbar-links rounded-pill py-3 m-1\">\r\n                        My NFTs\r\n                    </Link>\r\n\r\n                    <Create />\r\n\r\n                    {!address ? (\r\n                        <>\r\n                            <Button type='button' onClick={connect} variant=\"outline-dark\" className=\"navbar-btn rounded-pill px-5 m-1\">Connect Wallet</Button>\r\n                        </>\r\n                    ): (\r\n                        <>\r\n                            <Button type='button' onClick={destroy} variant=\"outline-dark\" className=\"navbar-btn rounded-pill px-5 m-1\">LOGOUT</Button>\r\n                        </>\r\n                    )}\r\n                </div>\r\n            </nav>\r\n         </>\r\n     )\r\n}\r\n\r\nexport default Navigation\r\n","import {ERC20_DECIMALS} from \"./constants\";\r\n\r\n// format a wallet address\r\nexport const truncateAddress = (address) => {\r\n    if (!address) return\r\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 4, address.length);\r\n}\r\n\r\n// convert from big number\r\nexport const formatBigNumber = (num) => {\r\n    if (!num) return\r\n    return num.shiftedBy(-ERC20_DECIMALS).toFixed(2);\r\n}","import { useEffect, useRef } from \"react\";\r\nimport Jazzicon from \"@metamask/jazzicon\";\r\n\r\nexport default function Identicon({ address, size, ...rest }) {\r\n  const ref = useRef();\r\n\r\n  useEffect(() => {\r\n    if (address && ref.current) {\r\n      ref.current.innerHTML = \"\";\r\n      ref.current.appendChild(\r\n        Jazzicon(size, parseInt(address.slice(2, 10), 16))\r\n      );\r\n    }\r\n  }, [address, size]);\r\n\r\n  return (\r\n    <div {...rest}>\r\n      <div ref={ref} style={{ width: `${size}px`, height: `${size}px` }} />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Card, Col, Badge, Stack, Button, Modal, Form, FloatingLabel  } from \"react-bootstrap\";\r\nimport { truncateAddress } from \"../../utils\";\r\nimport Identicon from \"../ui/Identicon\";\r\nimport { toast } from \"react-toastify\";\r\nimport { NotificationSuccess,  NotificationError} from \"../ui/Notifications\";\r\nimport {useMarketContract} from \"../../hooks/useMarketContract\";\r\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\r\nimport { ethers } from \"ethers\";\r\n\r\nconst NftCard = ({ nft }) => {\r\n  \r\n  // get user wallet address and performActions function from Celo Contract Kit\r\n  const { address, performActions } = useContractKit();\r\n  const navigate = useNavigate()\r\n\r\n  // handles the state of the modal\r\n  const [show, setShow] = useState(false);\r\n\r\n  // sets price for relisting acording to user input from change price Button\r\n  const [price, setPrice] = useState(0);\r\n  // creates market contract abstraction\r\n  const marketContract = useMarketContract();\r\n\r\n  // check if all form data has been filled\r\n  const isFormFilled = () =>\r\n  nft && price;\r\n\r\n  // close the popup modal\r\n  const handleClose = () => {\r\n    setShow(false);\r\n  };\r\n\r\n  // function for updating NFT price\r\n  const relistNft = async () => {\r\n    try {\r\n        await performActions(async (kit) => {\r\n          /* user will be prompted to pay the asking process to complete the transaction */\r\n          console.log(price)\r\n          // calls relist function from marketplace contract, passing NFT item id, id that keeps track of each market item \r\n          // (not tokenId, which tracks the id in the NFT contract)\r\n          const relistItem = await marketContract.methods.relistItem(nft.itemId, price).send({ from: address });\r\n          if (!relistItem) alert(\"Failed to Re-List NFT.\" );\r\n          toast(<NotificationSuccess text=\"Updating NFT list....\" />);\r\n          // react component that redirects user to the explore page\r\n          navigate(`/explore`)\r\n        })\r\n      } catch (error) {\r\n        console.log({ error });\r\n        alert(\"Failed to Re-List NFT.\" )\r\n        toast(<NotificationError text=\"Failed to Re-List NFT.\" />);\r\n      }\r\n    };\r\n\r\n  // function for buying listed NFTs\r\n  const buyNft = async () => {\r\n    try {\r\n        // itemId (id that keeps track of each market item)\r\n        const id = parseInt(nft.itemId)\r\n\r\n        await performActions(async (kit) => {\r\n          // user wallet address\r\n          const { defaultAccount } = kit;\r\n          // market fee charged for buying NFT, determined when deploying the marketplace contract\r\n          const marketFee = 1;\r\n          // calculation of total price, nft price + fee percentage\r\n          const nftMarketPrice = (nft.price*(100 + marketFee))/100;\r\n          // parse total price to ether\r\n          const _totalPrice =( ethers.utils.parseUnits(nftMarketPrice.toString(), 'ether')).toString();\r\n          console.log(_totalPrice)\r\n          // call function from marketContract specifying the exact price of the NFT,\r\n          // if the price is incorrect wallet will say not able to estimate gas.\r\n          await marketContract.methods.purchaseItem(id).send({ from: defaultAccount, value: _totalPrice });\r\n\r\n          alert(`You have successfully purchased this NFT!`)\r\n          // redirects user to profile page\r\n          navigate(`/profile`)\r\n        })\r\n        // updates remove property of nft to true, so the button for buying is updated to Change price (for relisting)\r\n        nft.remove = true\r\n      } catch (error) {\r\n        console.log({ error });\r\n        alert(\"Failed to Buy NFT.\" )\r\n        toast(<NotificationError text=\"Failed to Buy NFT.\" />);\r\n      }\r\n    };\r\n\r\n\r\n  // gets the price from the form and updates to Ether\r\n  const getPrice = (e) => {\r\n    try {\r\n      // change price to ether so unit is correct\r\n      const priceFormatted = ethers.utils.parseEther(e.toString())\r\n      // updates price state\r\n      setPrice(priceFormatted);\r\n    } catch (error) {\r\n      console.log({ error })\r\n      toast(<NotificationError text=\"Price must be a Number.\" />);\r\n    }\r\n  }\r\n\r\n  // display the popup modal\r\n  const handleShow = () => setShow(true);\r\n\r\n\r\n  return (\r\n    <Col xs={5} sm={3} lg={3} xl={2} key={nft.tokenId} className=\"p-1 m-5\">\r\n      <Card className=\"h-100\">\r\n        <Card.Header>\r\n          <Stack direction=\"horizontal\" className=\"w-5\" gap={3}>\r\n            <Identicon address={nft.seller} size={22} />\r\n            <span className=\"font-monospace text-secondary\">\r\n              {truncateAddress(nft.seller)}\r\n            </span>\r\n            <Badge bg=\"secondary\" className=\"ms-auto\">\r\n              {nft.tokenId} ID\r\n            </Badge>\r\n          </Stack>\r\n        </Card.Header>\r\n\r\n        <div className=\" ratio ratio-4x3\">\r\n          <img src={nft.image} alt={nft.description} />\r\n        </div>\r\n\r\n        <Card.Body className=\"d-flex  flex-column text-center\">\r\n          <Card.Title>{nft.name}</Card.Title>\r\n          <Card.Text className=\"flex-grow-1\">{nft.description}</Card.Text>\r\n          <Card.Text className=\"flex-grow-1\">{`${nft.price} USD`}</Card.Text>\r\n          <Card.Text className=\"flex-grow-1\">{nft.exteralUrl}</Card.Text>\r\n        </Card.Body>\r\n        <Card.Footer className=\"d-flex  flex-row justify-content-center text-center\">\r\n          {/*renders buttons conditionally depending on whether or not user is the NFT owner */}\r\n          {!nft.relist && <Button variant=\"outline-dark\" className=\"rounded-pill px-4 mx-2 card-btn\" onClick={buyNft}>Buy</Button>}\r\n          {nft.relist && (\r\n            <>\r\n            <Button\r\n              onClick={handleShow}\r\n              variant=\"dark\"\r\n              className=\"rounded-pill px-4 card-btn\"\r\n            >\r\n              Change price\r\n            </Button>\r\n      \r\n            {/* Modal */}\r\n            <Modal show={show} onHide={handleClose} centered>\r\n              <Modal.Header closeButton>\r\n                <Modal.Title>Re-List NFT</Modal.Title>\r\n              </Modal.Header>\r\n      \r\n              <Modal.Body>\r\n                  <Form>\r\n                      <FloatingLabel\r\n                          controlId=\"InputPrice\"\r\n                          label=\"Price\"\r\n                          className=\"mb-3\"\r\n                          >\r\n                      <Form.Control\r\n                          as=\"textarea\"\r\n                          placeholder=\"Listing Price for your NFT\"\r\n                          style={{ height: \"80px\" }}\r\n                          onChange={(e) => {\r\n                          getPrice(e.target.value);\r\n                          }}\r\n                      />\r\n                      <select>\r\n                          <option value=\"CELO\">CELO</option>\r\n                      </select>\r\n                      </FloatingLabel>\r\n                  </Form>\r\n              </Modal.Body>\r\n      \r\n              <Modal.Footer>\r\n                <Button variant=\"outline-secondary\" onClick={handleClose}>\r\n                  Close\r\n                </Button>\r\n                <Button\r\n                  variant=\"dark\"\r\n                  disabled={!isFormFilled()}\r\n                  onClick={() => {\r\n                    relistNft();\r\n                    handleClose();\r\n                  }}\r\n                >\r\n                  Re-List NFT\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Modal>\r\n          </>\r\n          )}\r\n        </Card.Footer>\r\n      </Card>\r\n    </Col>\r\n  );\r\n};\r\n\r\nNftCard.propTypes = {\r\n  // props passed into this component\r\n  nft: PropTypes.instanceOf(Object).isRequired,\r\n};\r\n\r\nexport default NftCard;\r\n","import React from \"react\";\r\nimport { Spinner } from \"react-bootstrap\";\r\n\r\nconst Loader = () => (\r\n  <div className=\"d-flex justify-content-center\">\r\n    <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\r\n      <span className=\"visually-hidden\">Loading...</span>\r\n    </Spinner>\r\n  </div>\r\n);\r\nexport default Loader;\r\n","import React, { useEffect, useState, useCallback } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Nft from \"../nfts/Card\";\r\nimport Loader from \"../ui/Loader\";\r\nimport { Row } from \"react-bootstrap\";\r\nimport { useMarketContract } from \"../../hooks/useMarketContract\";\r\nimport { useMinterContract } from \"../../hooks/useMinterContract\";\r\nimport axios from \"axios\";\r\nimport {ethers} from \"ethers\";\r\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\r\nimport { RingLoader } from \"react-spinners\";\r\nimport './Explore.css';\r\n\r\n\r\n\r\n\r\nconst Explore = () => {\r\n    // to keep track of all NFTs to map over later\r\n    const [nfts, setNfts] = useState([]);\r\n    // check if NFTs are loaded or not\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    // gets the wallet address of user that is currently connected\r\n    const { address } = useContractKit();\r\n    // create marketplace contract abstraction\r\n    const marketContract = useMarketContract();\r\n    // create NFT contract abstraction\r\n    const minterContract = useMinterContract();\r\n\r\n    const getAssets = useCallback(async () => {\r\n        try {\r\n            // sets loading to true so it displays react animation while NFTs load\r\n            setLoading(true);\r\n            // calls fetchMarketItems from marketplace contract to get info from all the items\r\n            const data = await marketContract.methods.fetchMarketItems().call()\r\n            // map through all items\r\n            const items = await Promise.all(data.map(async marketItem => {\r\n                // gets the tokenId for each market item\r\n                const tokenId = Number(marketItem.tokenId);\r\n                // gets tokenURI for each market item\r\n                const tokenURI = await minterContract.methods.tokenURI(tokenId).call();\r\n                // get the address of NFT owner (used to filter out NFTs that are not owned by user)\r\n                const seller = marketItem.seller;\r\n                // get NFT metadata\r\n                const meta = await axios.get(tokenURI);\r\n                // get price and convert unit to ether\r\n                let price = ethers.utils.formatUnits(marketItem.price, 'ether');\r\n\r\n                // return an object with all item info needed for other functions\r\n                return {\r\n                    image: meta.data.image,\r\n                    description: meta.data.description,\r\n                    externalUrl: meta.data.externalUrl,\r\n                    seller: seller,\r\n                    name: meta.data.name,\r\n                    price: price,\r\n                    tokenURI: tokenURI,\r\n                    tokenId: tokenId,\r\n                    itemId: marketItem.itemId,\r\n                }\r\n            }))\r\n            if (!items) return;\r\n            \r\n            await items.map(nft => {\r\n              nft['remove'] = true\r\n              console.log(nft)\r\n              // add remove property for allowing to display buttons conditionally later\r\n              return address.toLowerCase() === nft.seller.toLowerCase() ? nft['relist'] = true : nft['relist'] = false\r\n            })\r\n            // set NFTs list to items\r\n            setNfts(items);               \r\n            \r\n        } catch (error) {\r\n          console.log({ error });\r\n        } finally {\r\n          // set loading to false so it stops react animation\r\n          setLoading(false);\r\n        }\r\n      }, [minterContract, marketContract, address]);\r\n\r\n      useEffect(() => {\r\n        try {\r\n          if (marketContract) {\r\n            // gets all market Items when the page loads\r\n            getAssets();\r\n          }\r\n        } catch (error) {\r\n          console.log({ error });\r\n        }\r\n      }, [marketContract, getAssets]);\r\n\r\n    return (\r\n        <>\r\n        {!loading ? (\r\n            <div className=\"explore-section\">\r\n              {nfts.length >= 1 ? (\r\n              <Row xs={1} sm={1} lg={1} className=\"w-100\">\r\n                  {nfts.map((_nft) => (\r\n                      <Nft\r\n                          key={_nft.tokenId}\r\n                          nft={{\r\n                          ..._nft,\r\n                          }}\r\n                      />\r\n                  ))}\r\n              </Row>\r\n              ) : (\r\n                  <div className=\"nonfts-div\">\r\n                      {<RingLoader color={\"green\"} size={150} />}\r\n                      <span className=\"nonfts-text\">No NFTs yet <br /> Create one to display</span>\r\n                  </div>\r\n              )\r\n              }\r\n            </div>\r\n        ) : (\r\n            <Loader />\r\n        )}\r\n        </>\r\n    );\r\n    };\r\n    \r\n\r\nExplore.propTypes = {\r\n    minterContract: PropTypes.instanceOf(Object)\r\n };\r\n    \r\nExplore.defaultProps = {\r\nminterContract: null,\r\n};\r\n\r\nexport default Explore;\r\n","import React, { useEffect, useState, useCallback } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Nft from \"../nfts/Card\";\r\nimport Loader from \"../ui/Loader\";\r\nimport { Row } from \"react-bootstrap\";\r\nimport { useMarketContract } from \"../../hooks/useMarketContract\";\r\nimport { useMinterContract } from \"../../hooks/useMinterContract\";\r\nimport axios from \"axios\";\r\nimport {ethers} from \"ethers\";\r\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\r\nimport { RingLoader } from \"react-spinners\";\r\nimport '../explore/Explore.css';\r\n\r\n\r\n\r\n\r\nconst Profile = () => {\r\n    // to keep track of all NFTs to map over later\r\n    const [nfts, setNfts] = useState([]);\r\n    // check if NFTs are loaded or not\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    // gets the wallet address of user that is currently connected\r\n    const { address } = useContractKit();\r\n    // create marketplace contract abstraction\r\n    const marketContract = useMarketContract();\r\n    // create NFT contract abstraction\r\n    const minterContract = useMinterContract();\r\n\r\n    const getAssets = useCallback(async () => {\r\n      try {\r\n          // sets loading to true so it displays react animation while NFTs load\r\n          setLoading(true);\r\n          // calls fetchMarketItems from marketplace contract to get info from all the items\r\n          const data = await marketContract.methods.fetchMarketItems().call()\r\n          // map through all items\r\n          const items = await Promise.all(data.map(async marketItem => {\r\n              // gets the tokenId for each market item\r\n              const tokenId = Number(marketItem.tokenId);\r\n              // gets tokenURI for each market item\r\n              const tokenURI = await minterContract.methods.tokenURI(tokenId).call();\r\n              // get the address of NFT owner (used to filter out NFTs that are not owned by user)\r\n              const seller = marketItem.seller;\r\n              // get NFT metadata\r\n              const meta = await axios.get(tokenURI);\r\n              // get price and convert unit to ether\r\n              let price = ethers.utils.formatUnits(marketItem.price, 'ether');\r\n\r\n              // return an object with all item info needed for other functions\r\n              return {\r\n                  image: meta.data.image,\r\n                  description: meta.data.description,\r\n                  externalUrl: meta.data.externalUrl,\r\n                  seller: seller,\r\n                  name: meta.data.name,\r\n                  price: price,\r\n                  tokenURI: tokenURI,\r\n                  tokenId: tokenId,\r\n                  itemId: marketItem.itemId,\r\n              }\r\n          }))\r\n          if (!items) return;\r\n          // filters all items to return only items owned by user\r\n          const profileItems = await items.filter(nft => {return address.toLowerCase() === nft.seller.toLowerCase()})\r\n          // maps through filtered items and sets relist property to true for all of them,\r\n          // so it´s possible to display the relist button later on\r\n          await profileItems.map(nft => nft['relist'] = true)\r\n          console.log(profileItems)\r\n          // sets nft list to be the filtered items\r\n          setNfts(profileItems);\r\n            \r\n        } catch (error) {\r\n          console.log({ error });\r\n        } finally {\r\n          // set loading to false so it stops react animation\r\n          setLoading(false);\r\n        }\r\n      }, [minterContract, marketContract, address]);\r\n\r\n      useEffect(() => {\r\n        try {\r\n          if (minterContract) {\r\n            // gets all market Items when the page loads\r\n            getAssets();\r\n          }\r\n        } catch (error) {\r\n          console.log({ error });\r\n        }\r\n      }, [minterContract, getAssets]);\r\n\r\n    return (\r\n        <div className=\"explore-section\">\r\n        {!loading ? (\r\n            <>\r\n            {nfts.length >= 1 ? (\r\n            <Row xs={1} sm={1} lg={1} className=\"w-100\">\r\n                {nfts.map((_nft) => (\r\n                    <Nft\r\n                        key={_nft.index}\r\n                        nft={{\r\n                        ..._nft,\r\n                        }}\r\n                    />\r\n                ))}\r\n            </Row>\r\n            ) : (\r\n                <div className=\"nonfts-div\">\r\n                    {<RingLoader color={\"green\"} size={150} />}\r\n                    <span className=\"nonfts-text\">No NFTs yet <br /> Create one to display</span>\r\n                </div>\r\n            )\r\n            }\r\n            </>\r\n        ) : (\r\n            <Loader />\r\n        )}\r\n        </div>\r\n    );\r\n    };\r\n    \r\n\r\nProfile.propTypes = {\r\n    minterContract: PropTypes.instanceOf(Object)\r\n };\r\n    \r\nProfile.defaultProps = {\r\nminterContract: null,\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport {BrowserRouter, Routes, Route } from \"react-router-dom\";\r\nimport Navigation from './components/navbar/Navigation';\r\nimport Explore from './components/explore/Explore';\r\nimport Profile from './components/profile/Profile';\r\nimport \"./App.css\";\r\n\r\n\r\n\r\nconst App = function AppWrapper() {\r\n\r\n  return (\r\n    <>\r\n      <BrowserRouter>\r\n        <Navigation />\r\n        <Routes>\r\n          <Route path=\"/\" exact element={<Explore />} />\r\n          <Route path=\"/NFT_Dapp_Celo\" element={<Explore />} />\r\n          <Route path=\"/explore\" element={<Explore />} />\r\n          <Route path=\"/profile\" element={<Profile />} />\r\n        </Routes>\r\n      </BrowserRouter>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({\r\n      getCLS, getFID, getFCP, getLCP, getTTFB,\r\n    }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {\r\n  ContractKitProvider,\r\n  Alfajores,\r\n  NetworkNames,\r\n} from \"@celo-tools/use-contractkit\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"@celo-tools/use-contractkit/lib/styles.css\";\r\nimport \"react-toastify/dist/ReactToastify.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ContractKitProvider\r\n      networks={[Alfajores]}\r\n      network={{\r\n        name: NetworkNames.Alfajores,\r\n        rpcUrl: \"https://alfajores-forno.celo-testnet.org\",\r\n        graphQl: \"https://alfajores-blockscout.celo-testnet.org/graphiql\",\r\n        explorer: \"https://alfajores-blockscout.celo-testnet.org\",\r\n        chainId: 44787,\r\n      }}\r\n      dapp={{\r\n        name: \"VMS NFT Marketplace\",\r\n        description: \"An NFT Marketplace\",\r\n      }}\r\n    >\r\n      <App />\r\n    </ContractKitProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}