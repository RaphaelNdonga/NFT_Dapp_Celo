{"version":3,"sources":["components/ui/Notifications.js","utils/index.js","utils/constants.js","components/ui/Identicon.js","components/Wallet.js","components/minter/Cover.js","utils/minter.js","components/minter/nfts/Add.js","components/minter/nfts/Card.js","components/ui/Loader.js","components/minter/nfts/index.js","hooks/useMinterContract.js","hooks/useContract.js","assets/img/1.png","App.js","hooks/useBalance.js","reportWebVitals.js","index.js"],"names":["Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","className","NotificationError","DefaultProps","defaultProps","truncateAddress","address","slice","length","formatBigNumber","num","shiftedBy","toFixed","Identicon","size","rest","ref","useRef","useEffect","current","innerHTML","appendChild","Jazzicon","parseInt","style","width","height","Wallet","amount","symbol","destroy","Dropdown","Toggle","variant","align","id","Spinner","animation","Menu","Item","href","target","Stack","direction","gap","Divider","as","onClick","Cover","name","coverImg","connect","background","minHeight","maxWidth","src","alt","Button","catch","e","console","log","client","ipfsHttpClient","createNft","minterContract","performActions","description","ipfsImage","ownerAddress","attributes","kit","defaultAccount","data","JSON","stringify","image","owner","add","added","url","path","methods","safeMint","send","from","transaction","uploadToIpfs","file","files","progress","prog","getNfts","nfts","totalSupply","call","nftsLength","i","nft","Promise","resolve","tokenURI","res","fetchNftMeta","meta","fetchNftOwner","index","push","Number","all","ipfsUrl","axios","get","ownerOf","fetchNftContractOwner","COLORS","SHAPES","AddNfts","save","useState","setName","setIpfsImage","setDescription","setAttributes","show","setShow","handleClose","setAttributesFunc","trait_type","value","attributeObject","arr","findIndex","el","oldArray","Modal","onHide","centered","Header","closeButton","Title","Body","Form","FloatingLabel","controlId","label","Control","type","placeholder","onChange","imageUrl","alert","Label","hidden","map","color","toLowerCase","shape","Footer","disabled","NftCard","Col","Card","Badge","bg","objectFit","Text","Row","attribute","key","Loader","role","NftList","useContractKit","setNfts","loading","setLoading","nftOwner","setNftOwner","getAssets","useCallback","allNfts","error","addNft","toast","fetchContractOwner","_address","Add","xs","sm","lg","_nft","useMinterContract","abi","contractAddress","getConnectedKit","contract","setContract","getContract","web3","eth","Contract","useContract","MyNFTAbi","MyNFTContractAddress","MyNFT","App","balance","setBalance","getBalance","getTotalBalance","useBalance","Container","fluid","Nav","CELO","updateBalance","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","networks","Alfajores","network","NetworkNames","rpcUrl","graphQl","explorer","chainId","dapp","document","getElementById"],"mappings":"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","file":"static/js/main.599993fb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n\r\nconst Notification = () => (\r\n  <ToastContainer\r\n    position=\"bottom-center\"\r\n    autoClose={5000}\r\n    hideProgressBar\r\n    newestOnTop\r\n    closeOnClick\r\n    rtl={false}\r\n    pauseOnFocusLoss\r\n    draggable={false}\r\n    pauseOnHover\r\n  />\r\n);\r\n\r\nconst NotificationSuccess = ({ text }) => (\r\n  <div>\r\n    <i className=\"bi bi-check-circle-fill text-success mx-2\" />\r\n    <span className=\"text-secondary mx-1\">{text}</span>\r\n  </div>\r\n);\r\n\r\nconst NotificationError = ({ text }) => (\r\n  <div>\r\n    <i className=\"bi bi-x-circle-fill text-danger mx-2\" />\r\n    <span className=\"text-secondary mx-1\">{text}</span>\r\n  </div>\r\n);\r\n\r\nconst Props = {\r\n  text: PropTypes.string,\r\n};\r\n\r\nconst DefaultProps = {\r\n  text: \"\",\r\n};\r\n\r\nNotificationSuccess.propTypes = Props;\r\nNotificationSuccess.defaultProps = DefaultProps;\r\n\r\nNotificationError.propTypes = Props;\r\nNotificationError.defaultProps = DefaultProps;\r\n\r\nexport { Notification, NotificationSuccess, NotificationError };\r\n","import {ERC20_DECIMALS} from \"./constants\";\r\n\r\n// format a wallet address\r\nexport const truncateAddress = (address) => {\r\n    if (!address) return\r\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 4, address.length);\r\n}\r\n\r\n// convert from big number\r\nexport const formatBigNumber = (num) => {\r\n    if (!num) return\r\n    return num.shiftedBy(-ERC20_DECIMALS).toFixed(2);\r\n}","const ERC20_DECIMALS = 18;\r\nexport { ERC20_DECIMALS };\r\n","import { useEffect, useRef } from \"react\";\r\nimport Jazzicon from \"@metamask/jazzicon\";\r\n\r\nexport default function Identicon({ address, size, ...rest }) {\r\n  const ref = useRef();\r\n\r\n  useEffect(() => {\r\n    if (address && ref.current) {\r\n      ref.current.innerHTML = \"\";\r\n      ref.current.appendChild(\r\n        Jazzicon(size, parseInt(address.slice(2, 10), 16))\r\n      );\r\n    }\r\n  }, [address, size]);\r\n\r\n  return (\r\n    <div {...rest}>\r\n      <div ref={ref} style={{ width: `${size}px`, height: `${size}px` }} />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Dropdown, Stack, Spinner } from \"react-bootstrap\";\r\nimport { formatBigNumber, truncateAddress } from \"./../utils\";\r\nimport Identicon from \"./ui/Identicon\";\r\n\r\nconst Wallet = ({ address, amount, symbol, destroy }) => {\r\n  if (address) {\r\n    return (\r\n      <>\r\n        <Dropdown>\r\n          <Dropdown.Toggle\r\n            variant=\"light\"\r\n            align=\"end\"\r\n            id=\"dropdown-basic\"\r\n            className=\"d-flex align-items-center border rounded-pill py-1\"\r\n          >\r\n            {amount ? (\r\n              <>\r\n                {formatBigNumber(amount)}{\" \"}\r\n                <span className=\"ms-1\"> {symbol}</span>\r\n              </>\r\n            ) : (\r\n              <Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\" />\r\n            )}\r\n            <Identicon address={address} size={28} className=\"ms-2 me-1\" />\r\n          </Dropdown.Toggle>\r\n\r\n          <Dropdown.Menu className=\"shadow-lg border-0\">\r\n            <Dropdown.Item\r\n              href={`https://alfajores-blockscout.celo-testnet.org/address/${address}/transactions`}\r\n              target=\"_blank\"\r\n            >\r\n              <Stack direction=\"horizontal\" gap={2}>\r\n                <i className=\"bi bi-person-circle fs-4\" />\r\n                <span className=\"font-monospace\">\r\n                  {truncateAddress(address)}\r\n                </span>\r\n              </Stack>\r\n            </Dropdown.Item>\r\n            <Dropdown.Divider />\r\n            <Dropdown.Item\r\n              as=\"button\"\r\n              className=\"d-flex align-items-center\"\r\n              onClick={() => {\r\n                destroy();\r\n              }}\r\n            >\r\n              <i className=\"bi bi-box-arrow-right me-2 fs-4\" />\r\n              Disconnect\r\n            </Dropdown.Item>\r\n          </Dropdown.Menu>\r\n        </Dropdown>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport default Wallet;\r\n","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Cover = ({ name, coverImg, connect }) => {\r\n  if (name) {\r\n    return (\r\n      <div\r\n        className=\"d-flex justify-content-center flex-column text-center \"\r\n        style={{ background: \"#000\", minHeight: \"100vh\" }}\r\n      >\r\n        <div className=\"mt-auto text-light mb-5\">\r\n          <div\r\n            className=\" ratio ratio-1x1 mx-auto mb-2\"\r\n            style={{ maxWidth: \"320px\" }}\r\n          >\r\n            <img src={coverImg} alt=\"\" />\r\n          </div>\r\n          <h1>{name}</h1>\r\n          <p>Please connect your wallet to continue.</p>\r\n          <Button\r\n            onClick={() => connect().catch((e) => console.log(e))}\r\n            variant=\"outline-light\"\r\n            className=\"rounded-pill px-3 mt-3\"\r\n          >\r\n            Connect Wallet\r\n          </Button>\r\n        </div>\r\n\r\n        <p className=\"mt-auto text-secondary\">Powered by Celo</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nCover.propTypes = {\r\n  name: PropTypes.string,\r\n};\r\n\r\nCover.defaultProps = {\r\n  name: \"\",\r\n};\r\n\r\nexport default Cover;\r\n\r\n","import { create as ipfsHttpClient } from \"ipfs-http-client\";\r\nimport axios from \"axios\";\r\n\r\nconst client = ipfsHttpClient(\"https://ipfs.infura.io:5001/api/v0\");\r\n\r\nexport const createNft = async (\r\n    minterContract,\r\n    performActions,\r\n    { name, description, ipfsImage, ownerAddress, attributes }\r\n  ) => {\r\n    await performActions(async (kit) => {\r\n      if (!name || !description || !ipfsImage) return;\r\n      const { defaultAccount } = kit;\r\n  \r\n      // convert NFT metadata to JSON format\r\n      const data = JSON.stringify({\r\n        name,\r\n        description,\r\n        image: ipfsImage,\r\n        owner: defaultAccount,\r\n        attributes,\r\n      });\r\n  \r\n      try {\r\n        // save NFT metadata to IPFS\r\n        const added = await client.add(data);\r\n  \r\n        // IPFS url for uploaded metadata\r\n        const url = `https://ipfs.infura.io/ipfs/${added.path}`;\r\n  \r\n        // mint the NFT and save the IPFS url to the blockchain\r\n        let transaction = await minterContract.methods\r\n          .safeMint(ownerAddress, url)\r\n          .send({ from: defaultAccount });\r\n  \r\n        return transaction;\r\n      } catch (error) {\r\n        console.log(\"Error uploading file: \", error);\r\n      }\r\n    });\r\n  };\r\n\r\n  export const uploadToIpfs = async (e) => {\r\n    const file = e.target.files[0];\r\n    if (!file) return;\r\n    try {\r\n      const added = await client.add(file, {\r\n        progress: (prog) => console.log(`received: ${prog}`),\r\n      });\r\n      return `https://ipfs.infura.io/ipfs/${added.path}`;\r\n    } catch (error) {\r\n      console.log(\"Error uploading file: \", error);\r\n    }\r\n  };\r\n\r\n  export const getNfts = async (minterContract) => {\r\n    try {\r\n      const nfts = [];\r\n      const nftsLength = await minterContract.methods.totalSupply().call();\r\n      for (let i = 0; i < Number(nftsLength); i++) {\r\n        const nft = new Promise(async (resolve) => {\r\n          const res = await minterContract.methods.tokenURI(i).call();\r\n          const meta = await fetchNftMeta(res);\r\n          const owner = await fetchNftOwner(minterContract, i);\r\n          resolve({\r\n            index: i,\r\n            owner,\r\n            name: meta.data.name,\r\n            image: meta.data.image,\r\n            description: meta.data.description,\r\n            attributes: meta.data.attributes,\r\n          });\r\n        });\r\n        nfts.push(nft);\r\n      }\r\n      return Promise.all(nfts);\r\n    } catch (e) {\r\n      console.log({ e });\r\n    }\r\n  };\r\n\r\n\r\n  export const fetchNftMeta = async (ipfsUrl) => {\r\n    try {\r\n      if (!ipfsUrl) return null;\r\n      const meta = await axios.get(ipfsUrl);\r\n      return meta;\r\n    } catch (e) {\r\n      console.log({ e });\r\n    }\r\n  };\r\n\r\n\r\n  export const fetchNftOwner = async (minterContract, index) => {\r\n    try {\r\n      return await minterContract.methods.ownerOf(index).call();\r\n    } catch (e) {\r\n      console.log({ e });\r\n    }\r\n  };\r\n  \r\n  export const fetchNftContractOwner = async (minterContract) => {\r\n    try {\r\n      let owner = await minterContract.methods.owner().call();\r\n      return owner;\r\n    } catch (e) {\r\n      console.log({ e });\r\n    }\r\n  };\r\n\r\n  ","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button, Modal, Form, FloatingLabel } from \"react-bootstrap\";\r\nimport { uploadToIpfs } from \"../../../utils/minter\";\r\n\r\nconst COLORS = [\"Red\", \"Green\", \"Blue\", \"Cyan\", \"Yellow\", \"Purple\"];\r\nconst SHAPES = [\"Circle\", \"Square\", \"Triangle\"];\r\n\r\nconst AddNfts = ({ save, address }) => {\r\n    const [name, setName] = useState(\"\");\r\n    const [ipfsImage, setIpfsImage] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [attributes, setAttributes] = useState([]);\r\n    const [show, setShow] = useState(false);\r\n\r\n      // check if all form data has been filled\r\n  const isFormFilled = () =>\r\n  name && ipfsImage && description && attributes.length > 2;\r\n\r\n  // close the popup modal\r\n  const handleClose = () => {\r\n    setShow(false);\r\n    setAttributes([]);\r\n  };\r\n\r\n  // display the popup modal\r\n  const handleShow = () => setShow(true);\r\n\r\n  // add an attribute to an NFT\r\n  const setAttributesFunc = (e, trait_type) => {\r\n    const { value } = e.target;\r\n    const attributeObject = {\r\n      trait_type,\r\n      value,\r\n    };\r\n    const arr = attributes;\r\n\r\n    // check if attribute already exists\r\n    const index = arr.findIndex((el) => el.trait_type === trait_type);\r\n\r\n    if (index >= 0) {\r\n      // update the existing attribute\r\n      arr[index] = {\r\n        trait_type,\r\n        value,\r\n      };\r\n      setAttributes(arr);\r\n      return;\r\n    }\r\n\r\n    // add a new attribute\r\n    setAttributes((oldArray) => [...oldArray, attributeObject]);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        onClick={handleShow}\r\n        variant=\"dark\"\r\n        className=\"rounded-pill px-0\"\r\n        style={{ width: \"38px\" }}\r\n      >\r\n        <i className=\"bi bi-plus\"></i>\r\n      </Button>\r\n\r\n      {/* Modal */}\r\n      <Modal show={show} onHide={handleClose} centered>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Create NFT</Modal.Title>\r\n        </Modal.Header>\r\n\r\n        <Modal.Body>\r\n          <Form>\r\n            <FloatingLabel\r\n              controlId=\"inputLocation\"\r\n              label=\"Name\"\r\n              className=\"mb-3\"\r\n            >\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Name of NFT\"\r\n                onChange={(e) => {\r\n                  setName(e.target.value);\r\n                }}\r\n              />\r\n            </FloatingLabel>\r\n\r\n            <FloatingLabel\r\n              controlId=\"inputDescription\"\r\n              label=\"Description\"\r\n              className=\"mb-3\"\r\n            >\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                placeholder=\"description\"\r\n                style={{ height: \"80px\" }}\r\n                onChange={(e) => {\r\n                  setDescription(e.target.value);\r\n                }}\r\n              />\r\n            </FloatingLabel>\r\n\r\n            <Form.Control\r\n              type=\"file\"\r\n              className={\"mb-3\"}\r\n              onChange={async (e) => {\r\n                const imageUrl = await uploadToIpfs(e);\r\n                if (!imageUrl) {\r\n                  alert(\"failed to upload image\");\r\n                  return;\r\n                }\r\n                setIpfsImage(imageUrl);\r\n              }}\r\n              placeholder=\"Product name\"\r\n            ></Form.Control>\r\n            <Form.Label>\r\n              <h5>Properties</h5>\r\n            </Form.Label>\r\n            <Form.Control\r\n              as=\"select\"\r\n              className={\"mb-3\"}\r\n              onChange={async (e) => {\r\n                setAttributesFunc(e, \"background\");\r\n              }}\r\n              placeholder=\"Background\"\r\n            >\r\n              <option hidden>Background</option>\r\n              {COLORS.map((color) => (\r\n                <option\r\n                  key={`background-${color.toLowerCase()}`}\r\n                  value={color.toLowerCase()}\r\n                >\r\n                  {color}\r\n                </option>\r\n              ))}\r\n            </Form.Control>\r\n\r\n            <Form.Control\r\n              as=\"select\"\r\n              className={\"mb-3\"}\r\n              onChange={async (e) => {\r\n                setAttributesFunc(e, \"color\");\r\n              }}\r\n              placeholder=\"NFT Color\"\r\n            >\r\n              <option hidden>Color</option>\r\n              {COLORS.map((color) => (\r\n                <option\r\n                  key={`color-${color.toLowerCase()}`}\r\n                  value={color.toLowerCase()}\r\n                >\r\n                  {color}\r\n                </option>\r\n              ))}\r\n            </Form.Control>\r\n\r\n            <Form.Control\r\n              as=\"select\"\r\n              className={\"mb-3\"}\r\n              onChange={async (e) => {\r\n                setAttributesFunc(e, \"shape\");\r\n              }}\r\n              placeholder=\"NFT Shape\"\r\n            >\r\n              <option hidden>Shape</option>\r\n              {SHAPES.map((shape) => (\r\n                <option\r\n                  key={`shape-${shape.toLowerCase()}`}\r\n                  value={shape.toLowerCase()}\r\n                >\r\n                  {shape}\r\n                </option>\r\n              ))}\r\n            </Form.Control>\r\n          </Form>\r\n        </Modal.Body>\r\n\r\n        <Modal.Footer>\r\n          <Button variant=\"outline-secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button\r\n            variant=\"dark\"\r\n            disabled={!isFormFilled()}\r\n            onClick={() => {\r\n              save({\r\n                name,\r\n                ipfsImage,\r\n                description,\r\n                ownerAddress: address,\r\n                attributes,\r\n              });\r\n              handleClose();\r\n            }}\r\n          >\r\n            Create NFT\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nAddNfts.propTypes = {\r\n    save: PropTypes.func.isRequired,\r\n    address: PropTypes.string.isRequired,\r\n};\r\n  \r\nexport default AddNfts;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Card, Col, Badge, Stack, Row } from \"react-bootstrap\";\r\nimport { truncateAddress } from \"../../../utils\";\r\nimport Identicon from \"../../ui/Identicon\";\r\n\r\nconst NftCard = ({ nft }) => {\r\n  const { image, description, owner, name, index, attributes } = nft;\r\n\r\n  return (\r\n    <Col key={index}>\r\n      <Card className=\" h-100\">\r\n        <Card.Header>\r\n          <Stack direction=\"horizontal\" gap={2}>\r\n            <Identicon address={owner} size={28} />\r\n            <span className=\"font-monospace text-secondary\">\r\n              {truncateAddress(owner)}\r\n            </span>\r\n            <Badge bg=\"secondary\" className=\"ms-auto\">\r\n              {index} ID\r\n            </Badge>\r\n          </Stack>\r\n        </Card.Header>\r\n\r\n        <div className=\" ratio ratio-4x3\">\r\n          <img src={image} alt={description} style={{ objectFit: \"cover\" }} />\r\n        </div>\r\n\r\n        <Card.Body className=\"d-flex  flex-column text-center\">\r\n          <Card.Title>{name}</Card.Title>\r\n          <Card.Text className=\"flex-grow-1\">{description}</Card.Text>\r\n          <div>\r\n            <Row className=\"mt-2\">\r\n              {attributes.map((attribute, key) => (\r\n                <Col key={key}>\r\n                  <div className=\"border rounded bg-light\">\r\n                    <div className=\"text-secondary fw-lighter small text-capitalize\">\r\n                      {attribute.trait_type}\r\n                    </div>\r\n                    <div className=\"text-secondary text-capitalize font-monospace\">\r\n                      {attribute.value}\r\n                    </div>\r\n                  </div>\r\n                </Col>\r\n              ))}\r\n            </Row>\r\n          </div>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n  );\r\n};\r\n\r\nNftCard.propTypes = {\r\n  // props passed into this component\r\n  nft: PropTypes.instanceOf(Object).isRequired,\r\n};\r\n\r\nexport default NftCard;\r\n","import React from \"react\";\r\nimport { Spinner } from \"react-bootstrap\";\r\n\r\nconst Loader = () => (\r\n  <div className=\"d-flex justify-content-center\">\r\n    <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\r\n      <span className=\"visually-hidden\">Loading...</span>\r\n    </Spinner>\r\n  </div>\r\n);\r\nexport default Loader;\r\n","import { useContractKit } from \"@celo-tools/use-contractkit\";\r\nimport React, { useEffect, useState, useCallback } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport PropTypes from \"prop-types\";\r\nimport AddNfts from \"./Add\";\r\nimport Nft from \"./Card\";\r\nimport Loader from \"../../ui/Loader\";\r\nimport { NotificationSuccess, NotificationError } from \"../../ui/Notifications\";\r\nimport {\r\n  getNfts,\r\n  createNft,\r\n  fetchNftContractOwner,\r\n} from \"../../../utils/minter\";\r\nimport { Row } from \"react-bootstrap\";\r\n\r\n\r\n\r\nconst NftList = ({ minterContract, name }) => {\r\n    const { performActions, address } = useContractKit();\r\n    const [nfts, setNfts] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [nftOwner, setNftOwner] = useState(null);\r\n\r\n    const getAssets = useCallback(async () => {\r\n        try {\r\n          setLoading(true);\r\n          const allNfts = await getNfts(minterContract);\r\n          if (!allNfts) return;\r\n          setNfts(allNfts);\r\n        } catch (error) {\r\n          console.log({ error });\r\n        } finally {\r\n          setLoading(false);\r\n        }\r\n      }, [minterContract]);\r\n\r\n\r\n    const addNft = async (data) => {\r\n    try {\r\n        setLoading(true);\r\n        await createNft(minterContract, performActions, data);\r\n        toast(<NotificationSuccess text=\"Updating NFT list....\" />);\r\n        getAssets();\r\n    } catch (error) {\r\n        console.log({ error });\r\n        toast(<NotificationError text=\"Failed to create an NFT.\" />);\r\n    } finally {\r\n        setLoading(false);\r\n    }\r\n    };\r\n\r\n\r\n    const fetchContractOwner = useCallback(async (minterContract) => {\r\n        // get the address that deployed the NFT contract\r\n        const _address = await fetchNftContractOwner(minterContract);\r\n        setNftOwner(_address);\r\n      }, []);\r\n      \r\n      useEffect(() => {\r\n        try {\r\n          if (address && minterContract) {\r\n            getAssets();\r\n            fetchContractOwner(minterContract);\r\n          }\r\n        } catch (error) {\r\n          console.log({ error });\r\n        }\r\n      }, [minterContract, address, getAssets, fetchContractOwner]);\r\n\r\n      if (address) {\r\n        return (\r\n          <>\r\n            {!loading ? (\r\n              <>\r\n                <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n                  <h1 className=\"fs-4 fw-bold mb-0\">{name}</h1>\r\n                  {nftOwner === address ? (\r\n                    <AddNfts save={addNft} address={address} />\r\n                  ) : null}\r\n                </div>\r\n                <Row xs={1} sm={2} lg={3} className=\"g-3  mb-5 g-xl-4 g-xxl-5\">\r\n                  {nfts.map((_nft) => (\r\n                    <Nft\r\n                      key={_nft.index}\r\n                      nft={{\r\n                        ..._nft,\r\n                      }}\r\n                    />\r\n                  ))}\r\n                </Row>\r\n              </>\r\n            ) : (\r\n              <Loader />\r\n            )}\r\n          </>\r\n        );\r\n      }\r\n      return null;\r\n    };\r\n    \r\n\r\nNftList.propTypes = {\r\n    minterContract: PropTypes.instanceOf(Object),\r\n    updateBalance: PropTypes.func.isRequired,\r\n };\r\n    \r\nNftList.defaultProps = {\r\nminterContract: null,\r\n};\r\n\r\n    export default NftList;","import { useContract } from \"./useContract\";\r\nimport MyNFTAbi from \"../contracts/MyNFT.json\";\r\nimport MyNFTContractAddress from \"../contracts/MyNFT-address.json\";\r\n\r\nexport const useMinterContract = () =>\r\n  useContract(MyNFTAbi.abi, MyNFTContractAddress.MyNFT);\r\n\r\n","import { useState, useEffect, useCallback } from \"react\";\r\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\r\n\r\nexport const useContract = (abi, contractAddress) => {\r\n  const { getConnectedKit, address } = useContractKit();\r\n  const [contract, setContract] = useState(null);\r\n\r\n  const getContract = useCallback(async () => {\r\n    const kit = await getConnectedKit();\r\n    setContract(new kit.web3.eth.Contract(abi, contractAddress));\r\n  }, [getConnectedKit, abi, contractAddress]);\r\n\r\n  useEffect(() => {\r\n    if (address) getContract();\r\n  }, [address, getContract]);\r\n\r\n  return contract;\r\n};\r\n","export default __webpack_public_path__ + \"static/media/1.7d9150fc.png\";","import React from \"react\";\r\nimport { Container, Nav } from \"react-bootstrap\";\r\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\r\nimport { Notification } from \"./components/ui/Notifications\";\r\nimport Wallet from \"./components/Wallet\";\r\nimport Cover from \"./components/minter/Cover\";\r\nimport Nfts from \"./components/minter/nfts\";\r\nimport { useBalance, useMinterContract } from \"./hooks\";\r\nimport coverImg from \"./assets/img/1.png\";\r\nimport \"./App.css\";\r\n\r\nconst App = function AppWrapper() {\r\n  const { address, destroy, connect } = useContractKit();\r\n  const { balance, getBalance } = useBalance();\r\n  const minterContract = useMinterContract();\r\n\r\n  return (\r\n    <>\r\n      <Notification />\r\n      {address ? (\r\n        <Container fluid=\"md\">\r\n          <Nav className=\"justify-content-end pt-3 pb-5\">\r\n            <Nav.Item>\r\n              <Wallet\r\n                address={address}\r\n                amount={balance.CELO}\r\n                symbol=\"CELO\"\r\n                destroy={destroy}\r\n              />\r\n            </Nav.Item>\r\n          </Nav>\r\n          <main>\r\n            <Nfts\r\n              name=\"GEO Collection\"\r\n              updateBalance={getBalance}\r\n              minterContract={minterContract}\r\n            />\r\n          </main>\r\n        </Container>\r\n      ) : (\r\n        <Cover name=\"VMS Collection\" coverImg={coverImg} connect={connect} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { useState, useEffect, useCallback } from \"react\";\r\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\r\n\r\nexport const useBalance = () => {\r\n  const { address, kit } = useContractKit();\r\n  const [balance, setBalance] = useState(0);\r\n\r\n  const getBalance = useCallback(async () => {\r\n    // fetch a connected wallet token balance\r\n    const value = await kit.getTotalBalance(address);\r\n    setBalance(value);\r\n  }, [address, kit]);\r\n\r\n  useEffect(() => {\r\n    if (address) getBalance();\r\n  }, [address, getBalance]);\r\n\r\n  return {\r\n    balance,\r\n    getBalance,\r\n  };\r\n};\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({\r\n      getCLS, getFID, getFCP, getLCP, getTTFB,\r\n    }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {\r\n  ContractKitProvider,\r\n  Alfajores,\r\n  NetworkNames,\r\n} from \"@celo-tools/use-contractkit\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"@celo-tools/use-contractkit/lib/styles.css\";\r\nimport \"react-toastify/dist/ReactToastify.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ContractKitProvider\r\n      networks={[Alfajores]}\r\n      network={{\r\n        name: NetworkNames.Alfajores,\r\n        rpcUrl: \"https://alfajores-forno.celo-testnet.org\",\r\n        graphQl: \"https://alfajores-blockscout.celo-testnet.org/graphiql\",\r\n        explorer: \"https://alfajores-blockscout.celo-testnet.org\",\r\n        chainId: 44787,\r\n      }}\r\n      dapp={{\r\n        name: \"Celo React Boilerplate\",\r\n        description: \"A React Boilerplate for Celo Dapps\",\r\n      }}\r\n    >\r\n      <App />\r\n    </ContractKitProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}